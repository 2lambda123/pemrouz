(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _debounce = require('utilise/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _escape = require('utilise/escape');

var _escape2 = _interopRequireDefault(_escape);

var _raw = require('utilise/raw');

var _raw2 = _interopRequireDefault(_raw);

var _to = require('utilise/to');

var _to2 = _interopRequireDefault(_to);

var _rijs = require('rijs.core');

var _rijs2 = _interopRequireDefault(_rijs);

var _rijs3 = require('rijs.data');

var _rijs4 = _interopRequireDefault(_rijs3);

var _rijs5 = require('rijs.sync');

var _rijs6 = _interopRequireDefault(_rijs5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ripple = (0, _rijs6.default)((0, _rijs4.default)((0, _rijs2.default)())),
    con = window.console,
    log = console.log;

var html = '',
    running = true,
    failures = 0,
    passes = 0,
    tests = 0,
    name = 'All Tests',
    output = (0, _raw2.default)('pre');

// reload on force reload
ripple.io.on('reload', reload);

// after first connect, reload on reconnect
ripple.io.on('connect', function (d) {
  return ripple.io.on('connect', reload);
});

// send tests-starting signal
ripple('results', {
  stats: { running: running },
  suites: [],
  html: 'Test in progress..'
});

// proxy errors back to terminal
window.onerror = function (message, url, linenumber) {
  return ripple.io.emit('global err', message, url, linenumber);
}

// proxy console logs back to terminal
;['log', 'info', 'warn', 'error', 'debug'].map(function (m) {
  if (!con) return; // ie
  var sup = window.console[m];
  window.console[m] = function () {
    var args = _to2.default.arr(arguments);
    ripple.io.emit('console', m, args.map(function (d) {
      return d;
    }));
    sup.apply && sup.apply(con, arguments);
  };
});

// stream results back
var update = (0, _debounce2.default)(function () {
  var stats = { running: running, tests: tests, passes: passes, failures: failures },
      suites = [{ name: name, failures: failures, total: tests }];

  ripple('results', { stats: stats, suites: suites, html: html });
});

// listen on log
console.log = function () {
  var line = _to2.default.arr(arguments).join(' ');
  html += (0, _escape2.default)(line) + '\n';

  if (-1 === includes('# tests')(line)) running = false;
  if (-1 === includes('ok ')(line)) {
    passes++;tests++;
  }
  if (-1 === includes('not ok ')(line)) {
    failures++;tests++;
  }

  update();
  output.innerHTML = html;
  log.apply(console, arguments);
};

function reload() {
  location.reload();
}
},{"rijs.core":3,"rijs.data":5,"rijs.sync":6,"utilise/debounce":13,"utilise/escape":17,"utilise/raw":33,"utilise/to":37}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = core;

var _emitterify = require('utilise/emitterify');

var _emitterify2 = _interopRequireDefault(_emitterify);

var _colorfill = require('utilise/colorfill');

var _colorfill2 = _interopRequireDefault(_colorfill);

var _chainable = require('utilise/chainable');

var _chainable2 = _interopRequireDefault(_chainable);

var _identity = require('utilise/identity');

var _identity2 = _interopRequireDefault(_identity);

var _header = require('utilise/header');

var _header2 = _interopRequireDefault(_header);

var _values = require('utilise/values');

var _values2 = _interopRequireDefault(_values);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

var _to = require('utilise/to');

var _to2 = _interopRequireDefault(_to);

var _za = require('utilise/za');

var _za2 = _interopRequireDefault(_za);

var _text = require('./types/text');

var _text2 = _interopRequireDefault(_text);

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -------------------------------------------
// API: Gets or sets a resource
// -------------------------------------------
// ripple('name')     - returns the resource body if it exists
// ripple('name')     - creates & returns resource if it doesn't exist
// ripple('name', {}) - creates & returns resource, with specified name and body
// ripple({ ... })    - creates & returns resource, with specified name, body and headers
// ripple.resources   - returns raw resources
// ripple.resource    - alias for ripple, returns ripple instead of resource for method chaining
// ripple.register    - alias for ripple
// ripple.on          - event listener for changes - all resources
// ripple('name').on  - event listener for changes - resource-specific

function core() {
  log('creating');

  var resources = {};
  ripple.resources = resources;
  ripple.resource = (0, _chainable2.default)(ripple);
  ripple.register = ripple;
  ripple.types = types();
  return (0, _emitterify2.default)(ripple);

  function ripple(name, body, headers) {
    return !name ? ripple : _is2.default.arr(name) ? name.map(ripple) : _is2.default.obj(name) && !name.name ? ripple : _is2.default.fn(name) && name.resources ? ripple((0, _values2.default)(name.resources)) : _is2.default.str(name) && !body && resources[name] ? resources[name].body : _is2.default.str(name) && !body && !resources[name] ? register(ripple)({ name: name }) : _is2.default.str(name) && body ? register(ripple)({ name: name, body: body, headers: headers }) : _is2.default.obj(name) && !_is2.default.arr(name) ? register(ripple)(name) : (err('could not find or create resource', name), false);
  }
}

var register = function register(ripple) {
  return function (_ref) {
    var name = _ref.name;
    var body = _ref.body;
    var _ref$headers = _ref.headers;
    var headers = _ref$headers === undefined ? {} : _ref$headers;

    log('registering', name);
    var res = normalise(ripple)({ name: name, body: body, headers: headers });

    if (!res) return err('failed to register', name), false;
    ripple.resources[name] = res;
    ripple.emit('change', [name, { type: 'update', value: res.body }]);
    return ripple.resources[name].body;
  };
};

var normalise = function normalise(ripple) {
  return function (res) {
    if (!(0, _header2.default)('content-type')(res)) (0, _values2.default)(ripple.types).sort((0, _za2.default)('priority')).some(contentType(res));
    if (!(0, _header2.default)('content-type')(res)) return err('could not understand resource', res), false;
    return parse(ripple)(res);
  };
};

var parse = function parse(ripple) {
  return function (res) {
    var type = (0, _header2.default)('content-type')(res);
    if (!ripple.types[type]) return err('could not understand type', type), false;
    return (ripple.types[type].parse || _identity2.default)(res);
  };
};

var contentType = function contentType(res) {
  return function (type) {
    return type.check(res) && (res.headers['content-type'] = type.header);
  };
};

var types = function types() {
  return [_text2.default].reduce(_to2.default.obj('header'), 1);
};

var err = require('utilise/err')('[ri/core]'),
    log = require('utilise/log')('[ri/core]');
},{"./types/text":4,"utilise/chainable":8,"utilise/colorfill":10,"utilise/emitterify":15,"utilise/err":16,"utilise/header":21,"utilise/identity":22,"utilise/is":24,"utilise/log":28,"utilise/to":37,"utilise/values":38,"utilise/za":39}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _includes = require('utilise/includes');

var _includes2 = _interopRequireDefault(_includes);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  header: 'text/plain',
  check: function check(res) {
    return !(0, _includes2.default)('.html')(res.name) && !(0, _includes2.default)('.css')(res.name) && _is2.default.str(res.body);
  }
};
},{"utilise/includes":23,"utilise/is":24}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = data;

var _emitterify = require('utilise/emitterify');

var _emitterify2 = _interopRequireDefault(_emitterify);

var _overwrite = require('utilise/overwrite');

var _overwrite2 = _interopRequireDefault(_overwrite);

var _header = require('utilise/header');

var _header2 = _interopRequireDefault(_header);

var _extend = require('utilise/extend');

var _extend2 = _interopRequireDefault(_extend);

var _not = require('utilise/not');

var _not2 = _interopRequireDefault(_not);

var _def = require('utilise/def');

var _def2 = _interopRequireDefault(_def);

var _key = require('utilise/key');

var _key2 = _interopRequireDefault(_key);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

var _to = require('utilise/to');

var _to2 = _interopRequireDefault(_to);

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -------------------------------------------
// Adds support for data resources
// -------------------------------------------
function data(ripple) {
  log('creating');
  ripple.on('change.data', trickle(ripple));
  ripple.types['application/data'] = {
    header: 'application/data',
    check: function check(res) {
      return _is2.default.obj(res.body) || !res.body ? true : false;
    },
    parse: function parse(res) {
      var existing = ripple.resources[res.name] || {};

      !res.body && (res.body = []);
      !res.body.on && (res.body = (0, _emitterify2.default)(res.body, null));

      (0, _extend2.default)(res.headers)(existing.headers);
      (0, _overwrite2.default)(res.body.on)(existing.body && existing.body.on || {});

      if (logged(existing)) logged(res) ? res.body.log = existing.body.log.reset(res.body) : (0, _def2.default)(res.body, 'log', existing.body.log.reset(res.body), 1);

      res.body.on('change.bubble', function (change) {
        return ripple.emit('change', [res.name, change], (0, _not2.default)(_is2.default.in(['data'])));
      });
      res.body.on('log.bubble', function (change) {
        return res.body.emit('change', change);
      });

      return res;
    }
  };

  return ripple;
}

var trickle = function trickle(ripple) {
  return function (name, change) {
    return (0, _header2.default)('content-type', 'application/data')(ripple.resources[name]) && ripple.resources[name].body.emit('change', [change || null], (0, _not2.default)(_is2.default.in(['bubble'])));
  };
};

var log = require('utilise/log')('[ri/types/data]'),
    logged = (0, _key2.default)('body.log');
},{"utilise/def":14,"utilise/emitterify":15,"utilise/extend":18,"utilise/header":21,"utilise/is":24,"utilise/key":25,"utilise/log":28,"utilise/not":30,"utilise/overwrite":31,"utilise/to":37}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = sync;

var _identity = require('utilise/identity');

var _identity2 = _interopRequireDefault(_identity);

var _values = require('utilise/values');

var _values2 = _interopRequireDefault(_values);

var _header = require('utilise/header');

var _header2 = _interopRequireDefault(_header);

var _client = require('utilise/client');

/* istanbul ignore next */
var _client2 = _interopRequireDefault(_client);

var _noop = require('utilise/noop');

/* istanbul ignore next */
var _noop2 = _interopRequireDefault(_noop);

var _keys = require('utilise/keys');

var _keys2 = _interopRequireDefault(_keys);

var _not = require('utilise/not');

var _not2 = _interopRequireDefault(_not);

var _str = require('utilise/str');

var _str2 = _interopRequireDefault(_str);

var _set = require('utilise/set');

var _set2 = _interopRequireDefault(_set);

var _key = require('utilise/key');

var _key2 = _interopRequireDefault(_key);

var _by = require('utilise/by');

var _by2 = _interopRequireDefault(_by);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -------------------------------------------
// API: Synchronises resources between server/client
// -------------------------------------------
function sync(ripple, server) {
  log('creating');

/* istanbul ignore next */
  if (!_client2.default && !server) return;
/* istanbul ignore next */
  if (!_client2.default) ripple.to = clean(ripple.to), (0, _values2.default)(ripple.types).map(headers(ripple));

  ripple.stream = stream(ripple);
  ripple.io = io(server);
  ripple.on('change.stream', ripple.stream()); // both   - broadcast change to everyone
  ripple.io.on('change', consume(ripple)); // client - receive change
  ripple.io.on('connection', function (s) {
    return s.on('change', consume(ripple));
  }); // server - receive change
  ripple.io.on('connection', function (s) {
    return ripple.stream(s)();
  }); // server - send all resources to new client
  ripple.io.use(setIP);
  return ripple;
}

// send diff to all or some sockets
var stream = function stream(ripple) {
  return function (sockets) {
    return function (name, change) {
      if (!name) return (0, _values2.default)(ripple.resources).map(function (d) {
        return stream(ripple)(sockets)(d.name);
      });

/* istanbul ignore next */
      var everyone = _client2.default ? [ripple.io] : (0, _values2.default)(ripple.io.of('/').sockets),
          log = count(everyone.length, name),
          res = ripple.resources[name],
          send = to(ripple, res, change);

      return !res ? log('no resource', name) : _is2.default.str(sockets) ? (log(everyone.filter((0, _by2.default)('sessionID', sockets)).map(send)), ripple) : !sockets ? (log(everyone.map(send)), ripple) : (log(send(sockets)), ripple);
    };
  };
};

// outgoing transforms
var to = function to(ripple, res, change) {
  return function (socket) {
    if ((0, _header2.default)('silent', socket)(res)) return delete res.headers.silent, false;

    var xres = (0, _header2.default)('to')(res),
        xtype = type(ripple)(res).to,
        xall = ripple.to,
        body,
        rep,
        out;

    body = res.body;
    if (xres) {
      if (!(out = xres.call(socket, res, change))) return false;
      if (out !== true) {
        change = false, body = out;
      }
    }

    rep = { name: res.name, body: body, headers: res.headers };
    if (xtype) {
      if (!(out = xtype.call(socket, rep, change))) return false;
      if (out !== true) change = false, rep = out;
    }

    if (xall) {
      if (!(out = xall.call(socket, rep, change))) return false;
      if (out !== true) change = false, rep = out;
    }

    return socket.emit('change', change ? [res.name, change] : [res.name, false, rep]), true;
  };
};

// incoming transforms
var consume = function consume(ripple) {
  return function (_ref) {
/* istanbul ignore next */
    var _ref2 = _slicedToArray(_ref, 3);

    var name = _ref2[0];
    var change = _ref2[1];
    var _ref2$ = _ref2[2];
    var req = _ref2$ === undefined ? {} : _ref2$;

    log('receiving', name);

    var res = ripple.resources[name],
        xall = ripple.from,
        xtype = type(ripple)(res).from || type(ripple)(req).from,
        xres = (0, _header2.default)('from')(res),
        types = ripple.types,
        next = (0, _set2.default)(change),
        silent = silence(this);

    return xall && !xall.call(this, req, change) ? debug('skip all', name) // rejected - by xall
    : xtype && !xtype.call(this, req, change) ? debug('skip type', name) // rejected - by xtype
    : xres && !xres.call(this, req, change) ? debug('skip res', name) // rejected - by xres
    : !change ? ripple(silent(req)) // accept - replace (new)
    : !change.key ? ripple(silent({ name: name, body: change.value })) // accept - replace at root
    : (silent(res), next(res.body)); // accept - deep change
  };
};

var count = function count(total, name) {
  return function (tally) {
    return debug((0, _str2.default)((_is2.default.arr(tally) ? tally : [1]).filter(Boolean).length).green.bold + '/' + (0, _str2.default)(total).green, 'sending', name);
  };
};

var headers = function headers(ripple) {
  return function (type) {
/* istanbul ignore next */
    var parse = type.parse || _noop2.default;
    type.parse = function (res) {
      var existing = ripple.resources[res.name],
          from = (0, _header2.default)('from')(res) || (0, _header2.default)('from')(existing),
          to = (0, _header2.default)('to')(res) || (0, _header2.default)('to')(existing);
      if (from) res.headers.from = from;
      if (to) res.headers.to = to;
      return parse.apply(this, arguments), res;
    };
  };
};

var io = function io(opts) {
/* istanbul ignore next */
  var r = !_client2.default ? require('socket.io')(opts.server || opts) : window.io ? window.io() : _is2.default.fn(require('socket.io-client')) ? require('socket.io-client')() : { on: _noop2.default, emit: _noop2.default };
/* istanbul ignore next */
  r.use = r.use || _noop2.default;
  return r;
};

var setIP = function setIP(socket, next) {
  socket.ip = socket.request.headers['x-forwarded-for'] || socket.request.connection.remoteAddress;
  next();
};

var clean = function clean(next) {
  return function (_ref3, change) {
    var name = _ref3.name;
    var body = _ref3.body;
    var headers = _ref3.headers;

    if (change) return next ? next.apply(this, arguments) : true;

    var stripped = {};

    (0, _keys2.default)(headers).filter((0, _not2.default)((0, _is2.default)('silent'))).map(function (header) {
      return stripped[header] = headers[header];
    });

    return (next || _identity2.default).apply(this, [{ name: name, body: body, headers: stripped }, change]);
  };
};

var type = function type(ripple) {
  return function (res) {
    return ripple.types[(0, _header2.default)('content-type')(res)] || {};
  };
},
    silence = function silence(socket) {
  return function (res) {
    return (0, _key2.default)('headers.silent', socket)(res);
  };
},
    log = require('utilise/log')('[ri/sync]'),
    err = require('utilise/err')('[ri/sync]'),
/* istanbul ignore next */
    debug = _noop2.default;
},{"socket.io":2,"socket.io-client":2,"utilise/by":7,"utilise/client":9,"utilise/err":16,"utilise/header":21,"utilise/identity":22,"utilise/is":24,"utilise/key":25,"utilise/keys":26,"utilise/log":28,"utilise/noop":29,"utilise/not":30,"utilise/set":35,"utilise/str":36,"utilise/values":38}],7:[function(require,module,exports){
var key = require('utilise/key')
  , is  = require('utilise/is')

module.exports = function by(k, v){
  var exists = arguments.length == 1
  return function(o){
    var d = key(k)(o)
    
    return d && v && d.toLowerCase && v.toLowerCase ? d.toLowerCase() === v.toLowerCase()
         : exists ? Boolean(d)
         : is.fn(v) ? v(d)
         : d == v
  }
}
},{"utilise/is":24,"utilise/key":25}],8:[function(require,module,exports){
module.exports = function chainable(fn) {
  return function(){
    return fn.apply(this, arguments), fn
  }
}
},{}],9:[function(require,module,exports){
module.exports = typeof window != 'undefined'
},{}],10:[function(require,module,exports){
var client = require('utilise/client')
  , colors = !client && require('colors')
  , has = require('utilise/has')
  , is = require('utilise/is')

module.exports = colorfill()

function colorfill(){
  /* istanbul ignore next */
  ['red', 'green', 'bold', 'grey', 'strip'].forEach(function(color) {
    !is.str(String.prototype[color]) && Object.defineProperty(String.prototype, color, {
      get: function() {
        return String(this)
      } 
    })
  })
}


},{"colors":2,"utilise/client":9,"utilise/has":20,"utilise/is":24}],11:[function(require,module,exports){
module.exports = function copy(from, to){ 
  return function(d){ 
    return to[d] = from[d], d
  }
}
},{}],12:[function(require,module,exports){
var sel = require('utilise/sel')

module.exports = function datum(node){
  return sel(node).datum()
}
},{"utilise/sel":34}],13:[function(require,module,exports){
var is = require('utilise/is')

module.exports = function debounce(d){
  var pending, wait = is.num(d) ? d : 100

  return is.fn(d) 
       ? next(d)
       : next

  function next(fn){
    return function(){
      var ctx = this, args = arguments
      pending && clearTimeout(pending)
      pending = setTimeout(function(){ fn.apply(ctx, args) }, wait)
    }
  }
  
}
},{"utilise/is":24}],14:[function(require,module,exports){
var has = require('utilise/has')

module.exports = function def(o, p, v, w){
  !has(o, p) && Object.defineProperty(o, p, { value: v, writable: w })
  return o[p]
}

},{"utilise/has":20}],15:[function(require,module,exports){
var err  = require('utilise/err')('[emitterify]')
  , keys = require('utilise/keys')
  , def  = require('utilise/def')
  , not  = require('utilise/not')
  , is   = require('utilise/is')
  
module.exports = function emitterify(body, dparam) {
  return def(body, 'emit', emit, 1)
       , def(body, 'once', once, 1)
       , def(body, 'on', on, 1)
       , body

  function emit(type, param, filter) {
    var ns = type.split('.')[1]
      , id = type.split('.')[0]
      , li = body.on[id] || []
      , tt = li.length - 1
      , tp = is.def(param)  ? param 
           : is.def(dparam) ? dparam
           : [body]
      , pm = is.arr(tp) ? tp : [tp]

    if (ns) return invoke(li, ns, pm), body

    for (var i = li.length; i >=0; i--)
      invoke(li, i, pm)

    keys(li)
      .filter(not(isFinite))
      .filter(filter || Boolean)
      .map(function(n){ return invoke(li, n, pm) })

    return body
  }

  function invoke(o, k, p){
    if (!o[k]) return
    var fn = o[k]
    o[k].once && (isFinite(k) ? o.splice(k, 1) : delete o[k])
    try { fn.apply(body, p) } catch(e) { err(e, e.stack)  }
   }

  function on(type, callback) {
    var ns = type.split('.')[1]
      , id = type.split('.')[0]

    body.on[id] = body.on[id] || []
    return !callback && !ns ? (body.on[id])
         : !callback &&  ns ? (body.on[id][ns])
         :  ns              ? (body.on[id][ns] = callback, body)
                            : (body.on[id].push(callback), body)
  }

  function once(type, callback){
    return callback.once = true, body.on(type, callback), body
  }
}
},{"utilise/def":14,"utilise/err":16,"utilise/is":24,"utilise/keys":26,"utilise/not":30}],16:[function(require,module,exports){
var owner = require('utilise/owner')
  , to = require('utilise/to')

module.exports = function err(prefix){
  return function(d){
    if (!owner.console || !console.error.apply) return d;
    var args = to.arr(arguments)
    args.unshift(prefix.red ? prefix.red : prefix)
    return console.error.apply(console, args), d
  }
}
},{"utilise/owner":32,"utilise/to":37}],17:[function(require,module,exports){
module.exports = function escape(str) {
  return str.replace(/[&<>'"]/g, function(char){
    return safe[char]
  })
}

var safe = { 
  "&": "&amp;"
, "<": "&lt;"
, ">": "&gt;"
, '"': "&quot;"
, "'": "&#39;"
}

},{}],18:[function(require,module,exports){
var is = require('utilise/is')
  , not = require('utilise/not')
  , keys = require('utilise/keys')
  , copy = require('utilise/copy')

module.exports = function extend(to){ 
  return function(from){
    keys(from)
      .filter(not(is.in(to)))
      .map(copy(from, to))

    return to
  }
}
},{"utilise/copy":11,"utilise/is":24,"utilise/keys":26,"utilise/not":30}],19:[function(require,module,exports){
var datum = require('utilise/datum')
  , key = require('utilise/key')

module.exports = from
from.parent = fromParent

function from(o){
  return function(k){
    return key(k)(o)
  }
}

function fromParent(k){
  return datum(this.parentNode)[k]
}
},{"utilise/datum":12,"utilise/key":25}],20:[function(require,module,exports){
module.exports = function has(o, k) {
  return k in o
}
},{}],21:[function(require,module,exports){
var key = require('utilise/key')

module.exports = function header(header, value) {
  var getter = arguments.length == 1
  return function(d){ 
    return !d || !d.headers ? null
         : getter ? key(header)(d.headers)
                  : key(header)(d.headers) == value
  }
}
},{"utilise/key":25}],22:[function(require,module,exports){
module.exports = function identity(d) {
  return d
}
},{}],23:[function(require,module,exports){
module.exports = function includes(pattern){
  return function(d){
    return d && d.indexOf && ~d.indexOf(pattern)
  }
}
},{}],24:[function(require,module,exports){
module.exports = is
is.fn     = isFunction
is.str    = isString
is.num    = isNumber
is.obj    = isObject
is.lit    = isLiteral
is.bol    = isBoolean
is.truthy = isTruthy
is.falsy  = isFalsy
is.arr    = isArray
is.null   = isNull
is.def    = isDef
is.in     = isIn

function is(v){
  return function(d){
    return d == v
  }
}

function isFunction(d) {
  return typeof d == 'function'
}

function isBoolean(d) {
  return typeof d == 'boolean'
}

function isString(d) {
  return typeof d == 'string'
}

function isNumber(d) {
  return typeof d == 'number'
}

function isObject(d) {
  return typeof d == 'object'
}

function isLiteral(d) {
  return typeof d == 'object' 
      && !(d instanceof Array)
}

function isTruthy(d) {
  return !!d == true
}

function isFalsy(d) {
  return !!d == false
}

function isArray(d) {
  return d instanceof Array
}

function isNull(d) {
  return d === null
}

function isDef(d) {
  return typeof d !== 'undefined'
}

function isIn(set) {
  return function(d){
    return !set ? false  
         : set.indexOf ? ~set.indexOf(d)
         : d in set
  }
}
},{}],25:[function(require,module,exports){
var str = require('utilise/str')
  , is = require('utilise/is')

module.exports = function key(k, v){ 
  var set = arguments.length > 1
    , keys = str(k).split('.')
    , root = keys.shift()

  return function deep(o, i){
    var masked = {}

    return !o ? undefined 
         : !is.num(k) && !k ? o
         : is.arr(k) ? (k.map(copy), masked)
         : o[k] || !keys.length ? (set ? ((o[k] = is.fn(v) ? v(o[k], i) : v), o)
                                         :   o[k])
                                  : (set ? (key(keys.join('.'), v)(o[root] ? o[root] : (o[root] = {})), o)
                                         : key(keys.join('.'))(o[root]))

    function copy(k){
      var val = key(k)(o)
      ;(val != undefined) && key(k, val)(masked)
    }
  }
}
},{"utilise/is":24,"utilise/str":36}],26:[function(require,module,exports){
module.exports = function keys(o) {
  return Object.keys(o || {})
}
},{}],27:[function(require,module,exports){
module.exports =  function last(d) {
  return d && d[d.length-1]
}
},{}],28:[function(require,module,exports){
var is = require('utilise/is')
  , to = require('utilise/to')
  , owner = require('utilise/owner')

module.exports = function log(prefix){
  return function(d){
    if (!owner.console || !console.log.apply) return d;
    is.arr(arguments[2]) && (arguments[2] = arguments[2].length)
    var args = to.arr(arguments)
    args.unshift(prefix.grey ? prefix.grey : prefix)
    return console.log.apply(console, args), d
  }
}
},{"utilise/is":24,"utilise/owner":32,"utilise/to":37}],29:[function(require,module,exports){
module.exports = function noop(){}
},{}],30:[function(require,module,exports){
module.exports = function not(fn){
  return function(){
    return !fn.apply(this, arguments)
  }
}
},{}],31:[function(require,module,exports){
var is = require('utilise/is')
  , keys = require('utilise/keys')
  , copy = require('utilise/copy')

module.exports = function overwrite(to){ 
  return function(from){
    keys(from)
      .map(copy(from, to))
        
    return to
  }
}
},{"utilise/copy":11,"utilise/is":24,"utilise/keys":26}],32:[function(require,module,exports){
(function (global){
module.exports = require('utilise/client') ? /* istanbul ignore next */ window : global
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"utilise/client":9}],33:[function(require,module,exports){
module.exports = function raw(selector, doc){
  var prefix = !doc && document.head.createShadowRoot ? 'html /deep/ ' : ''
  return (doc ? doc : document).querySelector(prefix+selector)
}
},{}],34:[function(require,module,exports){
module.exports = function sel(el){
  return el.node ? el : d3.select(el)
}
},{}],35:[function(require,module,exports){
var last = require('utilise/last')
  , key = require('utilise/key')
  , str = require('utilise/str')
  , is = require('utilise/is')

module.exports = exports = function set(diff) {
  return function(o) {
    if (!o || !is.obj(o) || !diff || !is.obj(diff)) return o
    var key = str(diff.key)
    act.raw[diff.type](o, key, diff.value)
    return set.commit(o, { key: key, value: diff.value, type: diff.type })
  }
}

exports.commit = function commit(o, diff) {
  var log = o.log

  if (log) log.push({ 
    diff: diff
  , value: act.imm[diff.type](last(log).value, diff.key.split('.'), diff.value) 
  })

  if (o.emit) o.emit('log', diff)

  return o
}

function leaf(o, k, v){
  var path = k.split('.')
    , tail = path.pop()
    , body = key(path.join('.'))(o)

  return { body: body, tail: tail }
}

var act = {
  raw: {
    add   : function(o, k, v) { var l = leaf(o, k); return is.arr(l.body) ? l.body.splice(l.tail, 0, v) : key(k, v)(o) }
  , update: function(o, k, v) { return key(k, v)(o) }
  , remove: function(o, k, v) { 
      var l = leaf(o, k)
      return is.arr(l.body) ? l.body.splice(l.tail, 1)
           : l.body         ? delete l.body[l.tail]
           : false 
    }
  }
, imm: {
    update: function(o, k, v) { return o.setIn(k, v) }
  , remove: function(o, k, v) { return o.deleteIn(k) }
  , add   : function(o, k, v) { 
      var path = k.slice(0, -1)
        , tail = k.slice(-1)
        , last = o.getIn(path)

      return last && last.splice 
           ? o.setIn(path, last.splice(tail, 0, v))
           : o.setIn(k, v)
    }
  }
}
},{"utilise/is":24,"utilise/key":25,"utilise/last":27,"utilise/str":36}],36:[function(require,module,exports){
var is = require('utilise/is') 

module.exports = function str(d){
  return d === 0 ? '0'
       : !d ? ''
       : is.fn(d) ? '' + d
       : is.obj(d) ? JSON.stringify(d)
       : String(d)
}
},{"utilise/is":24}],37:[function(require,module,exports){
module.exports = { 
  arr: toArray
, obj: toObject
}

function toArray(d){
  return Array.prototype.slice.call(d, 0)
}

function toObject(d) {
  var by = 'id'
    , o = {}

  return arguments.length == 1 
    ? (by = d, reduce)
    : reduce.apply(this, arguments)

  function reduce(p,v,i){
    if (i === 0) p = {}
    p[v[by]] = v
    return p
  }
}
},{}],38:[function(require,module,exports){
var keys = require('utilise/keys')
  , from = require('utilise/from')

module.exports = function values(o) {
  return !o ? [] : keys(o).map(from(o))
}
},{"utilise/from":19,"utilise/keys":26}],39:[function(require,module,exports){
var key = require('utilise/key')

module.exports = function za(k) {
  return function(a, b){
    var ka = key(k)(a) || ''
      , kb = key(k)(b) || ''

    return ka > kb ? -1 
         : ka < kb ?  1 
                   :  0
  }
}

},{"utilise/key":25}]},{},[1]);
